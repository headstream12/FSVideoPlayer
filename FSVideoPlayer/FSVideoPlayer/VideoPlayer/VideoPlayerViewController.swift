//
//  VideoPlayerViewController.swift
//  fschool_ios
//
//  Created Ilya Glazunov on 14/06/2018.
//  Copyright © 2018 Altarix. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import AVFoundation

class VideoPlayerViewController: UIViewController {

    @IBOutlet weak var videoView: UIView!
    @IBOutlet weak var currentTimeLabel: UILabel!
    @IBOutlet weak var durationLabel: UILabel!
    @IBOutlet weak var timeSlider: UISlider!
    @IBOutlet weak var playButton: UIButton!
    @IBOutlet weak var controlView: UIView!
    @IBOutlet weak var navigationBar: UINavigationBar!
    @IBOutlet weak var settingButton: UIBarButtonItem!
    
    private var controlTimer: Timer?
    private var isVideoPlaying = false
    private var currentTime: CMTime?
    private var player: AVPlayer!
    private var playerLayer: AVPlayerLayer!
    
    var playlistUrl: URL? = URL(string: "http://backend.dev.fschool.altarix.org/hls/vSqyu3G37dQvsSph1QPBjl4k9kdRAYFk/eH5e1N_,36,72,108,0p.m4v.urlset/master-v1-a2.m3u8")!
    
    var presenter: VideoPlayerPresenterProtocol?

    override func awakeFromNib() {
        super.awakeFromNib()
        VideoPlayerRouter.createModule(with: self)
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        
        player = AVPlayer(url: URL(string: "https://www.123test123.ru")!)
        player.currentItem?.addObserver(self, forKeyPath: "duration", options: [.new, .initial], context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackBufferEmpty", options: .new, context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackLikelyToKeepUp", options: .new, context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackBufferFull", options: .new, context: nil)
        
        addTimeObserver()
        
        playerLayer = AVPlayerLayer(player: nil)
        playerLayer.videoGravity = .resize
        videoView.layer.addSublayer(playerLayer)

        let tap = UITapGestureRecognizer(target: self, action: #selector(handleTap))
        tap.delegate = self
        view.addGestureRecognizer(tap)
        
        settingButton.image = #imageLiteral(resourceName: "settingIcon").withRenderingMode(.alwaysOriginal)
        presenter?.viewDidLoadWith(url: playlistUrl)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationBar.setNavigationBarTransluent()
        UIApplication.shared.statusBarStyle = .lightContent
        UIApplication.shared.statusBarView?.backgroundColor = UIColor.black.withAlphaComponent(0.24)
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        playerLayer.frame = videoView.bounds
    }
    
    func addTimeObserver() {
        guard let presenter = self.presenter else {
            return
        }
        
        let interval = CMTime(seconds: 0.5, preferredTimescale: CMTimeScale(NSEC_PER_SEC))
        let mainQueue = DispatchQueue.main
        _ = player.addPeriodicTimeObserver(forInterval: interval, queue: mainQueue, using: { [weak self] time in
            guard let currentItem = self?.player.currentItem else {return}
            self?.currentTime = currentItem.currentTime()
            self?.timeSlider.minimumValue = 0
            self?.timeSlider.value = Float(currentItem.currentTime().seconds)
            self?.currentTimeLabel.text = presenter.getTimeString(from: currentItem.currentTime())
            if currentItem.currentTime().seconds.rounded(toPlaces: 2) == currentItem.duration.seconds.rounded(toPlaces: 2) {
                self?.playAction()
            }
        })
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        guard let presenter = self.presenter else {
            return
        }
        
        if keyPath == "duration", let duration = player.currentItem?.duration.seconds, duration > 0.0 {
            self.durationLabel.text = presenter.getTimeString(from: player.currentItem!.duration)
            self.timeSlider.maximumValue = Float(player.currentItem!.duration.seconds)
        }
        
        if object is AVPlayerItem {
            switch keyPath {
            case "playbackBufferEmpty":
                showIndicator()
            case "playbackLikelyToKeepUp":
                hideIndicator()
            case "playbackBufferFull":
                hideIndicator()
            default: break
            }
        }
    }
    
    @IBAction func sliderValueChanged(_ sender: UISlider) {
        controlTimer?.invalidate()
        player.seek(to: CMTimeMake(Int64(sender.value*1000), 1000))
        if isVideoPlaying {
            controlTimer = getHideControlViewTimer()
        }
    }
    
    @IBAction func onPlayButtonClick(_ sender: UIButton) {
        playAction()
    }
    
    @IBAction func onSettingButtonClick(_ sender: UIBarButtonItem) {
        presenter?.onSettingButtonClick()
    }
    
    private func playAction() {
        if isVideoPlaying {
            isVideoPlaying = !isVideoPlaying
            player.pause()
            playButton.setImage(#imageLiteral(resourceName: "playIcon"), for: .normal)
            controlTimer?.invalidate()
            if player.currentItem?.currentTime().seconds.rounded(toPlaces: 2) == player.currentItem?.duration.seconds.rounded(toPlaces: 2) {
                showControlView()
            }
        } else {
            isVideoPlaying = !isVideoPlaying
            if player.currentItem?.currentTime().seconds.rounded(toPlaces: 2) == player.currentItem?.duration.seconds.rounded(toPlaces: 2) {
                player.seek(to: CMTimeMake(0, 1000))
            }
            player.play()
            playButton.setImage(#imageLiteral(resourceName: "pauseIcon"), for: .normal)
            controlTimer?.invalidate()
            controlTimer = getHideControlViewTimer()
        }
    }
    
    private func getHideControlViewTimer() -> Timer {
        return Timer.scheduledTimer(timeInterval: 3,
                                    target: self,
                                    selector: #selector(self.hideControlView),
                                    userInfo: nil,
                                    repeats: false)
    }
    
    override var prefersStatusBarHidden: Bool {
        return false
    }
}

extension VideoPlayerViewController: VideoPlayerViewProtocol {
    func playVideoWithUrl(_ url: URL) {
        player.currentItem?.removeObserver(self, forKeyPath: "duration")
        player.currentItem?.removeObserver(self, forKeyPath: "playbackBufferEmpty")
        player.currentItem?.removeObserver(self, forKeyPath: "playbackLikelyToKeepUp")
        player.currentItem?.removeObserver(self, forKeyPath: "playbackBufferFull")
        
        let newItem = AVPlayerItem(url: url)
        if currentTime != nil {
            newItem.seek(to: currentTime!, toleranceBefore: kCMTimeZero, toleranceAfter: kCMTimeZero, completionHandler: nil)
        }
        
        player.replaceCurrentItem(with: newItem)
        player.currentItem?.addObserver(self, forKeyPath: "duration", options: [.new, .initial], context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackBufferEmpty", options: .new, context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackLikelyToKeepUp", options: .new, context: nil)
        player.currentItem?.addObserver(self, forKeyPath: "playbackBufferFull", options: .new, context: nil)
        
        if playerLayer.player == nil {
            playerLayer.player = player
        }
        
        if !isVideoPlaying {
            playAction()
        }
    }
    
    func showError(_ error: Error) {
        //
    }
}

extension VideoPlayerViewController: UIGestureRecognizerDelegate {
    @objc func handleTap(sender: UITapGestureRecognizer) {
        if controlView.isHidden {
            showControlView()
        } else {
            hideControlView()
        }
    }
    
    private func showControlView() {
        self.controlView.isHidden = false
        UIView.animate(withDuration: 0.2, delay: 0, options: [], animations: {
            self.controlView.alpha = 1
            UIApplication.shared.statusBarView?.backgroundColor = UIColor.black.withAlphaComponent(0.24)
        }, completion: nil)
        controlTimer?.invalidate()
        if isVideoPlaying {
            controlTimer = getHideControlViewTimer()
        }
    }
    
    @objc private func hideControlView() {
        controlTimer?.invalidate()
        UIView.animate(withDuration: 0.2, delay: 0, options: [], animations: {
            self.controlView.alpha = 0
            UIApplication.shared.statusBarView?.backgroundColor = #colorLiteral(red: 0.1490196078, green: 0.1294117647, blue: 0.1725490196, alpha: 1)
        }, completion: { _ in
            self.controlView.isHidden = true
        })
    }
}
